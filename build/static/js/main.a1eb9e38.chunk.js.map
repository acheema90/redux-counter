{"version":3,"sources":["index.js"],"names":["initialState","count","store","createStore","state","arguments","length","undefined","type","mapDispatchToProps","increment","decrement","reset","Counter","_this$props","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","Component","CounterContainer","connect","render","react_redux__WEBPACK_IMPORTED_MODULE_8__","document","getElementById"],"mappings":"qNAQMA,SAAe,CACnBC,MAAO,IAsCHC,EAAQC,YAnBE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EACvB,QADgDK,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACjCC,MACb,IAlBc,YAmBZ,MAAO,CACLP,MAAOG,EAAMH,MAAQ,GAEzB,IArBc,YAsBZ,MAAO,CACLA,MAAOG,EAAMH,MAAQ,GAEzB,IAxBU,QAyBR,MAAO,CACLA,MAAO,GAEX,QACE,OAAOG,KAWPK,EAAsB,CAC1BC,UAvCgB,iBAAO,CACvBF,KALgB,cA4ChBG,UApCgB,iBAAO,CACvBH,KARgB,cA4ChBI,MAjCY,iBAAO,CACnBJ,KAXY,WA8CRK,mLACK,IAAAC,EACwCC,KAAKC,MAA5Cf,EADDa,EACCb,MAAOS,EADRI,EACQJ,UAAWC,EADnBG,EACmBH,UAAWC,EAD9BE,EAC8BF,MACrC,OACEK,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASnB,GACtBgB,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,UAAQE,QAASX,GAAjB,aACAO,EAAAC,EAAAC,cAAA,UAAQE,QAASV,GAAjB,aACAM,EAAAC,EAAAC,cAAA,UAAQE,QAAST,GAAjB,kBATYU,aAgBhBC,EAAmBC,YA3BD,SAACpB,GACvB,OAAOA,GA0ByCK,EAAzBe,CAA6CX,GAEtEY,iBACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAUxB,MAAOA,GACfe,EAAAC,EAAAC,cAACI,EAAD,OAEFI,SAASC,eAAe","file":"static/js/main.a1eb9e38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux';\n\nimport './styles.scss';\n\nconst initialState = {\n  count: 0\n};\n\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst RESET = 'RESET';\n\nconst increment = () => ({\n  type: INCREMENT\n});\n\nconst decrement = () => ({\n  type: DECREMENT\n});\n\nconst reset = () => ({\n  type: RESET\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        count: state.count + 1\n      };\n    case DECREMENT:\n      return {\n        count: state.count - 1\n      };\n    case RESET:\n      return {\n        count: 0\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\n// passing in object literal of actionCreators and redux will bind them to dispatch\nconst mapDispatchToProps =  {\n  increment,\n  decrement,\n  reset\n};\n\nclass Counter extends Component {\n  render() {\n    const { count, increment, decrement, reset } = this.props;\n    return (\n      <main className=\"Counter\">\n        <p className=\"count\">{count}</p>\n        <section className=\"controls\">\n          <button onClick={increment}>Increment</button>\n          <button onClick={decrement}>Decrement</button>\n          <button onClick={reset}>Reset</button>\n        </section>\n      </main>\n    );\n  }\n}\n\nconst CounterContainer = connect(mapStateToProps, mapDispatchToProps)(Counter);\n\nrender(\n    <Provider store={store}>\n      <CounterContainer />\n    </Provider>,\n    document.getElementById('root')\n  );\n"],"sourceRoot":""}